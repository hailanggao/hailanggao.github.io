<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Computer Network Note</title>
    <url>/2021/03/01/Computer%20Network%20Notes/</url>
    <content><![CDATA[<h2 id="Definition-Computer-network"><a href="#Definition-Computer-network" class="headerlink" title="Definition-Computer network"></a>Definition-Computer network</h2><p>A computer network is a set of <strong>nodes</strong> connected by <strong>communication links</strong>.</p>
<p><strong>Nodes</strong>: A node can be a computer, printer or any other device capable of sending/receiving data generated by other nodes in the network.</p>
<p><strong>Communication link</strong> can be a wired link or wireless link. The link carries the information.</p>
<a id="more"></a>

<h2 id="Basic-characteristics-of-computer-network"><a href="#Basic-characteristics-of-computer-network" class="headerlink" title="Basic characteristics of computer network"></a>Basic characteristics of computer network</h2><ul>
<li><strong>Fault tolerance</strong>: The ability to <ol>
<li>Continue working despite failures</li>
<li>Ensure no loss of service.</li>
</ol>
</li>
<li><strong>Scalability</strong>: The ability to <ol>
<li>Grow based on the needs</li>
<li>Have good performance after growth.</li>
</ol>
</li>
<li><strong>Quality of Service(QoS)</strong>: The ability to<ol>
<li>Set Priorities</li>
<li>Manage data traffic to reduce data loss, delay etc..</li>
</ol>
</li>
<li><strong>Security</strong>: <ul>
<li>The ability to prevent:<ul>
<li>Unauthorised access</li>
<li>Misuse</li>
<li>Forgery(伪造)</li>
</ul>
</li>
<li>The ability to provide:<ul>
<li>Confidentiality</li>
<li>Integrity</li>
<li>Availability</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Data-communication"><a href="#Data-communication" class="headerlink" title="Data communication:"></a>Data communication:</h2><p>Data communications are the exchange of data between two nodes via some form of link(transmission medium) such as a cable</p>
<h2 id="Data-flow"><a href="#Data-flow" class="headerlink" title="Data flow:"></a>Data flow:</h2><ul>
<li><strong>Simplex</strong>: <ul>
<li>Communication is always unidirectional. </li>
<li>One device can transmit and the other device will receive.</li>
<li>Example: Keyboards, traditional monitors.</li>
</ul>
</li>
<li><strong>Half Duplex</strong>:<ul>
<li>Communication is in both directions but not at the same time.</li>
<li>If one device is sending, the other can only receive, and vice versa.</li>
<li>Example: Walkie-Talkies(对讲机).</li>
</ul>
</li>
<li><strong>Duplex or Full Duplex</strong>:<ul>
<li>Communication is in both directions simultaneously.</li>
<li>Device can send and receive at the same time.</li>
<li>Example: Telephone line.</li>
</ul>
</li>
</ul>
<h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><ul>
<li><p>Protocol = Rule.</p>
</li>
<li><p>It is a set of rules that govern data communication.</p>
</li>
<li><p>Protocol determines:</p>
<ul>
<li>What is communicated?</li>
<li>How it is communicated?</li>
<li>When it is communicated?</li>
</ul>
</li>
<li><p>Protocols used in network communications also define(<strong>Elements of a protocol</strong>):</p>
<ol>
<li><strong>Message encoding</strong></li>
<li><strong>Message formatting and encapsulation</strong>: <ul>
<li>Agreed format</li>
<li>Encapsulated the information to identify the sender and the receiver rightly.</li>
</ul>
</li>
<li><strong>Message timing</strong>: Flow control and Response timeout</li>
<li><strong>Message size</strong>: Long messages must be broken into smaller pieces to travel across a network.</li>
<li><strong>Message delivery options</strong>:<ul>
<li>Unicast(One sender to one receiver)</li>
<li>Multicast(To many receivers but not all)</li>
<li>Broadcast(To all receivers)</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Peer-To-Peer-Network"><a href="#Peer-To-Peer-Network" class="headerlink" title="Peer-To-Peer Network"></a>Peer-To-Peer Network</h2><ul>
<li>No Centralized administration.</li>
<li>All peers are equal.</li>
<li>Simple sharing applications.</li>
<li>Not scalable.</li>
</ul>
<h2 id="Client-Server-Network"><a href="#Client-Server-Network" class="headerlink" title="Client Server Network"></a>Client Server Network</h2><ul>
<li>Centralised administration.</li>
<li>Request-Response model.</li>
<li>Scalable.</li>
<li>Server may be overloaded.</li>
</ul>
<h2 id="Components-of-a-Computer-Network"><a href="#Components-of-a-Computer-Network" class="headerlink" title="Components of a Computer Network"></a>Components of a Computer Network</h2><ol>
<li><strong>Nodes</strong>:<ul>
<li>End Nodes(End devices): computers, network printer, Mobile handheld devices(smart phones tablets, PDAs, wireless debit/credit card reader, barcode scanner)…</li>
<li>Intermediary nodes: switches, routers, Wireless access point, hubs, bridges…</li>
</ul>
</li>
<li><strong>Media</strong>:<ul>
<li>Wired Medium(Guided medium): Ethernet cable, fiver optic cable, USB cable…</li>
<li>Wireless Medium(Unguided medium):<ul>
<li>Infrared(short range communication-TV remote control)</li>
<li>Radio(Bluetooth, Wi-Fi)</li>
<li>Microwaves(Cellular System)</li>
<li>Satellite(Long Range communication-GPS)</li>
</ul>
</li>
</ul>
</li>
<li><strong>Services</strong>: e-mail, storage services, file sharing, instant messaging, online game, voice over IP…</li>
</ol>
<h2 id="Classification-of-Computer-Network"><a href="#Classification-of-Computer-Network" class="headerlink" title="Classification of Computer Network"></a>Classification of Computer Network</h2><ol>
<li><strong>Local Area Network(LAN)</strong>: <ul>
<li>A LAN is a computer network that interconnects computers within a <em>limited area</em> such as a residence, school, laboratory, university campus or office building.</li>
<li>LAN-devices: Wired LAN(Ethernet-Hub, Switch), Wireless LAN(Wi-Fi)</li>
</ul>
</li>
<li><strong>Metropolitan Area Network(MAN)</strong>:<ul>
<li>A MAN is a computer network that interconnects users with computer resources in a geographic region of size of a <em>metropolitan are(city)</em>.</li>
<li>MAN-devices: Switches/Hub, Routers/Bridges</li>
</ul>
</li>
<li><strong>Wide Area Network(WAN)</strong>:<ul>
<li>A WAN is a <em>telecommunications network</em> that extends over a <em>large geographical area</em> for the primary purpose of computer networking.</li>
<li>WAN-devices: End devices and intermediary devices</li>
</ul>
</li>
<li>Storage Area Network(SAN):<ul>
<li><strong>Cloud Computing</strong>:<ul>
<li>It is the on-demand availability of computer system resources, especially data storage and computing power, without direct active management by the user.</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Network-Topology"><a href="#Network-Topology" class="headerlink" title="Network Topology"></a>Network Topology</h2><p>Arrangement of nodes of a computer network.<br>Topology = Layout.<br>Physical Topology - Placement of various nodes.<br>Logical topology - Deals with the data flow in the network.</p>
<ul>
<li><p><strong>Bus</strong>: </p>
<ul>
<li><p>All data transmitted between nodes in the network is transmitted over this <em>common transmission medium</em> and is able to be received by all nodes in the network simultaneously.</p>
</li>
<li><p>A signal containing the address of the intended receiving machine travels from a source machine in <em>both directions</em> to all machines connected to the bus until it finds the intended recipient.</p>
<table>
<thead>
<tr>
<th>Advantages</th>
<th>Disadvantages</th>
</tr>
</thead>
<tbody><tr>
<td>Only one wire - less expensive</td>
<td>Not fault tolerant(No redundancy)</td>
</tr>
<tr>
<td>Suited for temporary network</td>
<td>Limited cable length</td>
</tr>
<tr>
<td>Node failures does not affect others</td>
<td>No security</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>Ring</strong>:</p>
<ul>
<li><p>A ring topology is a bus topology in a closed loop.</p>
</li>
<li><p>Peer-to-Peer lAN topology.</p>
</li>
<li><p>Two connections: one to each of its nearest neighbours.</p>
</li>
<li><p>Unidirectional.</p>
</li>
<li><p>Sending and receiving data takes place with the help of a <strong>TOKEN</strong>.</p>
<table>
<thead>
<tr>
<th>Advantages</th>
<th>Disadvantages</th>
</tr>
</thead>
<tbody><tr>
<td>Performance better than Bus topology</td>
<td>Unidirectional. Single point of failure will affect the whole network</td>
</tr>
<tr>
<td>All nodes with equal access</td>
<td>up in load - low in performance</td>
</tr>
<tr>
<td></td>
<td>No security</td>
</tr>
<tr>
<td></td>
<td>Can cause bottleneck due to weak links.</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>Star</strong> :</p>
<ul>
<li><p>Every node is connected to a central node called a hub or switch,</p>
</li>
<li><p>Centrailised Management.</p>
</li>
<li><p>All traffic must pass through the hub or switch.</p>
<table>
<thead>
<tr>
<th>Advantages</th>
<th>Disadvantages</th>
</tr>
</thead>
<tbody><tr>
<td>Easy to design and implement</td>
<td>Single point of failure affects the whole network</td>
</tr>
<tr>
<td>Centralised administration</td>
<td>Bottlenecks due to overloaded switch/hub</td>
</tr>
<tr>
<td>Scalable</td>
<td>Increased cost due to switch/hub</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>Mesh</strong>:</p>
<ul>
<li><p>Each node is directly connected to every other nodes in the networks.</p>
</li>
<li><p>Fault tolerant and reliable.</p>
<table>
<thead>
<tr>
<th>Advantages</th>
<th>Disadvantages</th>
</tr>
</thead>
<tbody><tr>
<td>Fault tolerant</td>
<td>Issues with broadcasting messages</td>
</tr>
<tr>
<td>Reliable</td>
<td>Expensive and impractical for large networks</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>Hybrid</strong></p>
</li>
</ul>
<hr>
<h2 id="IP-Address-IPv4"><a href="#IP-Address-IPv4" class="headerlink" title="IP Address(IPv4)"></a>IP Address(IPv4)</h2><ul>
<li>IP stands for Internet Protocol.</li>
<li>Every node in the computer network is identified with the help of IP address.</li>
<li>Logical address.</li>
<li>Can change based on the location of the device.</li>
<li>Assigned by manually or dynamically.</li>
<li>Represented in decimal and it has 4 octets(X.X.X.X).</li>
<li>0.0.0.0 to 255.255.255.255(32 bits).</li>
</ul>
<h2 id="MAC-Address"><a href="#MAC-Address" class="headerlink" title="MAC Address"></a>MAC Address</h2><ul>
<li>MAC stands for Media Access Control.</li>
<li>Every node in the LAN is identified with the help of MAC address.</li>
<li>IP address = Location of a person.</li>
<li>MAC address = Name of the person.</li>
<li>Physical address or Hardware Address.</li>
<li>Unique and cannot be changed.</li>
<li>Assigned by the manufacturer.</li>
<li>Represented in hexadecimal(70-20-84-00-ED-FC(48 bits)).</li>
<li>Separator: hyphen(-), period(.), and colon(:).</li>
</ul>
<h2 id="IP-Address-Vs-MAC-Address"><a href="#IP-Address-Vs-MAC-Address" class="headerlink" title="IP Address Vs. MAC Address"></a>IP Address Vs. MAC Address</h2><table>
<thead>
<tr>
<th>IP Address</th>
<th>MAC Address</th>
</tr>
</thead>
<tbody><tr>
<td>Needed for communication.</td>
<td>Needed for communication.</td>
</tr>
<tr>
<td>32 bits.</td>
<td>48 bits.</td>
</tr>
<tr>
<td>Represented in Decimal.</td>
<td>Represented in hexadecimal.</td>
</tr>
<tr>
<td><strong>Router</strong> needs IP address to forward data.</td>
<td><strong>Switch</strong> needs MAC address to forward data.</td>
</tr>
<tr>
<td>Example: 10.10.23.56</td>
<td>Example: 70-20-84-00-ED-FC</td>
</tr>
</tbody></table>
<h2 id="Port-Addressing-Port-Number"><a href="#Port-Addressing-Port-Number" class="headerlink" title="Port Addressing (Port Number)"></a>Port Addressing (Port Number)</h2><ul>
<li>In a node, many processes will be running.</li>
<li>Data which are sent/received must reach the right process.</li>
<li>Every process in a node is uniquely identified using <strong>port numbers</strong>.</li>
<li>Port = Communication endpoint.</li>
<li>Fixed port numbers and dynamic port numbers(0-65535)</li>
</ul>
<h2 id="3-Key-points-to-PONDER"><a href="#3-Key-points-to-PONDER" class="headerlink" title="3 Key points to PONDER"></a>3 Key points to PONDER</h2><p>Before sending the data, any node must</p>
<ul>
<li>Attach source IP address and destination IP address.</li>
<li>Attach source MAC address and destination MAC address.</li>
<li>Attach source port number and destination port number.</li>
</ul>
<hr>
<h2 id="Switching"><a href="#Switching" class="headerlink" title="Switching"></a>Switching</h2><ul>
<li>Switching in computer network helps in deciding <strong>the best route</strong> for data transmission if there are multiple paths in a large network.</li>
<li>One-to-One connection.</li>
</ul>
<h2 id="Switching-techniques"><a href="#Switching-techniques" class="headerlink" title="Switching techniques"></a>Switching techniques</h2><ul>
<li><p><strong>Circuit switching</strong>:</p>
<ul>
<li><p>A dedicated path is established between the sender and receiver.</p>
</li>
<li><p>Before data transfer, connection will be established first.</p>
</li>
<li><p>Example: Telephone network.</p>
<p>3 Phases in circuit switching:</p>
</li>
</ul>
<ol>
<li>Connection establishment</li>
<li>Data transfer</li>
<li>Connection Disconnection</li>
</ol>
</li>
<li><p><strong>Message Swithching</strong>:</p>
<ul>
<li>Store and forward mechanism.</li>
<li>Message is transferred as a complete unit and forwarded using store and forward mechanism at the intermediary node.</li>
<li>Not suited for streaming media and real-time applications.</li>
</ul>
</li>
<li><p><strong>Packet switching</strong>:</p>
<ul>
<li>The internet is a packet switched network.</li>
<li>Message is broken into individual chunks called as <strong>packets</strong>.</li>
<li>Each packet is sent individually.</li>
<li>Each packet will have <strong>source and destination IP address</strong> with sequence number.</li>
<li>Sequence numbers will help the receiver to<ul>
<li>Recorder the packets</li>
<li>Detect missing packets and</li>
<li>Send acknowledgments.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Two-approaches-to-packet-switching"><a href="#Two-approaches-to-packet-switching" class="headerlink" title="Two approaches to packet switching"></a>Two approaches to packet switching</h2><ol>
<li><strong>Datagram Approach</strong>:<ul>
<li>Datagram Packet Switching is also known as <strong>connectionless switching</strong>.</li>
<li>Each independent entity is called as datagram.</li>
<li>Datagrams contain destination information and the intermediary devices used this information to forward datagrams to right destination.</li>
<li>In Datagram Packet Switching approach, the path is not fixed.</li>
<li>Intermediate nodes take the routing decisions to forward the packets.</li>
</ul>
</li>
<li><strong>Virtual Circuit Approach</strong>:<ul>
<li>Virtual Circuit Switching is also known as <strong>connection-oriented switching</strong>.</li>
<li>In the case of Virtual circuit switching, a preplanned route is established before the messages are sent.</li>
<li>Call request and call accept packets are used to establish the connection between sender and receiver.</li>
<li>In this approach, the path is fixed for the duration of a logical connection.</li>
</ul>
</li>
</ol>
<hr>
]]></content>
      <tags>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo tutorial</title>
    <url>/2021/02/17/Hexo-tutorial/</url>
    <content><![CDATA[<h2 id="Prerequesite"><a href="#Prerequesite" class="headerlink" title="Prerequesite:"></a>Prerequesite:</h2><ul>
<li> This tutorial is based on the MacOS. The steps are similar on other systems.</li>
<li> <a href="https://nodejs.org/">Node.js</a>: <code>node</code> and <code>npm</code> should be installed after installing the <code>Node.js</code> package. </li>
<li><code>sudo -i</code> or <code>sudo su</code> switch to <code>root</code> account on your terminal.</li>
<li> You can check the their vision by the command <code>node -v</code> and <code>npm -v</code>.</li>
</ul>
<p><img src="images/16135470990344.png"></p>
<h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h2><ul>
<li><p><code>npm install -g hexo-cli</code> to simply install <code>hexo</code></p>
</li>
<li><p><code>hexo -v</code> to check the vision of <code>hexo</code> as well.<br><img src="images/16135473767369.png"></p>
</li>
<li><p>Enter your account directory by <code>cd /User/yourAccountName</code>, then create and a directory by <code>mkdir blog</code>. This directory will save every blog things. Then enter this <code>blog</code> directory.<br><img src="images/16135478201958.png"></p>
</li>
<li><p><code>hexo init</code> to initialise <code>blog</code>. Make sure add <code>sudo</code> at the front if you are not in <code>root</code> account. There are few basic frame content things would be saved in your <code>blog</code> directory after initialisation.<br><img src="images/16135481136676.png"></p>
</li>
<li><p><code>hexo s</code> to start our blog, then <code>Hexo</code> will be running at <code>http://localhost:4000</code>. Visit this host on your browse, you will see your <code>Hexo</code> blog is on and there is a quick start blog <code>hello-word</code> on it.<br><img src="images/Screen%20Shot%202021-02-17%20at%2015.55.08.png" alt="Screen Shot 2021-02-17 at 15.55.08"></p>
</li>
<li><p><code>Ctrl+c</code> to stop <code>hexo</code> and enter <code>cd source/_posts</code>, you will see this first blog <code>hello-world.md</code> is in there.</p>
</li>
</ul>
<h2 id="Blog-Creation"><a href="#Blog-Creation" class="headerlink" title="Blog Creation"></a>Blog Creation</h2><ul>
<li><code>hexo n &quot;YourBlogName&quot;</code> to crate your blogs and use <code>vim</code> or other editors you like to edit your blog. After editing your blog, then back to <code>blog</code> diractory.</li>
<li><code>hexo clean</code> to remove generated files and cache.</li>
<li><code>hexo g</code> to generate files.</li>
<li><code>hexo s</code> again, you will find your blogs appear on your hexo blog.<br><img src="images/16135494686637.png"></li>
</ul>
<h2 id="Deploy-blog-to-Github"><a href="#Deploy-blog-to-Github" class="headerlink" title="Deploy blog to Github"></a>Deploy blog to Github</h2><ul>
<li><p>Create a new repository on Github, and <code>Repository Name</code> <strong>must</strong> be <code>yourGithubAccountName.github.io</code>. For my example, <code>hailanggao.github.io</code>.<br><img src="images/16135512909405.png" alt="-w767"></p>
</li>
<li><p><code>npm install --save hexo-deployer-git</code> to instal <code>deployer</code> plug-in under <code>blog</code> directory.<br><img src="images/16135501316753.png"></p>
</li>
<li><p>Now we need to edit <code>_config.yml</code> scroll to the end. In <code>Deployment</code> section, Edit and save: </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: # your Github repository address (for me: https:&#x2F;&#x2F;github.com&#x2F;hailanggao&#x2F;hailanggao.github.io.git)</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<p><img src="images/16135514852166.png"></p>
<ul>
<li><code>hexo d</code>, then input your Github account and password to deploy. Mac might ask <code>Keychain Not Found</code>, just click <code>Reset To Defaults</code> and input your mac password. Then you will find your Github repository appear your generated blog.<br><img src="images/16135517037714.png"><br><img src="images/16135518755765.png"></li>
<li>You can directly visit your blog by enter your repository name on your browser after deploying.<br><img src="images/16135520183624.png" alt="-w915"></li>
</ul>
<h2 id="BackUp-Important"><a href="#BackUp-Important" class="headerlink" title="BackUp (Important !!!)"></a>BackUp (Important !!!)</h2><ul>
<li>Use <a href="https://github.com/coneycode/hexo-git-backup">hexo-git-backup</a> to back up our <code>hexo</code> configuration.</li>
<li><code>npm install hexo-git-backup --save</code> to install <code>hexo-backup</code> plug-in.</li>
<li>Create an branch repository named <code>backup</code> on your Github.</li>
<li>Edit <code>_config_yml</code>, add </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Backup</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  theme: next, ***  # *** other themes you want to back up, separate by comma</span><br><span class="line">  repo:</span><br><span class="line">    github: ***,backup # replace *** to your backup branch SSH address</span><br></pre></td></tr></table></figure>
<p><img src="images/16135569491549.png"></p>
<ul>
<li><p><code>hexo b</code> to back up your configurations on your <code>backup</code> branch.</p>
<h2 id="Theme-and-configuration-Option"><a href="#Theme-and-configuration-Option" class="headerlink" title="Theme and configuration (Option)"></a>Theme and configuration (Option)</h2></li>
<li><p>For me: I use <a href="https://github.com/theme-next/hexo-theme-next">NexT</a> theme.</p>
</li>
<li><p><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code> in your <code>blog</code> directory. It will save under <code>/blog/themes</code>.<br><img src="images/16135524473082.png"></p>
</li>
<li><p>Back to <code>blog</code> directory, edit <code>_config/yml</code>. and change <code>theme: landscape</code> to <code>theme: next</code>. Save and exit, then <code>hexo clean</code>(clean), <code>hexo g</code>(generate), <code>hexo s</code>(start). If everything is ok, <code>hexo d</code>(deploy) to deploy.<br><img src="images/16135526686387.png"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTML Syntax</title>
    <url>/2021/02/18/HTML-Syntax/</url>
    <content><![CDATA[<p><code>&lt;!DOCTYPE html&gt;</code><br><code>&lt;html&gt;</code><br><code>&lt;body&gt;</code></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>Tag</th>
<th>Explaination</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;p&gt;&lt;/p&gt;</code></td>
<td>Paragrpha</td>
</tr>
<tr>
<td><code>&lt;pre&gt;&lt;/pre&gt;</code></td>
<td>Preformatted text</td>
</tr>
<tr>
<td><code>&lt;br&gt;</code></td>
<td>Break to next line</td>
</tr>
<tr>
<td><code>&lt;hr&gt;</code></td>
<td>Horizontal row</td>
</tr>
<tr>
<td><code>&lt;mark&gt;&lt;/mark&gt;</code></td>
<td>Marked (highlight)</td>
</tr>
<tr>
<td><code>&lt;small&gt;&lt;/small&gt;</code></td>
<td>Smaller font</td>
</tr>
<tr>
<td><code>&lt;del&gt;&lt;/del&gt;</code></td>
<td>Deleted</td>
</tr>
<tr>
<td><code>&lt;sub&gt;&lt;/sub&gt;</code></td>
<td>Subscripted</td>
</tr>
<tr>
<td><code>&lt;sup&gt;&lt;/sup&gt;</code></td>
<td>Superscripted</td>
</tr>
<tr>
<td><code>&lt;b&gt;&lt;/b&gt;</code></td>
<td>Bold (print thick and dark type)</td>
</tr>
<tr>
<td><code>&lt;strong&gt;&lt;/strong&gt;</code></td>
<td>Same as <code>b</code> but emphasize</td>
</tr>
<tr>
<td><code>&lt;i&gt;&lt;/i&gt;</code></td>
<td>Italic</td>
</tr>
<tr>
<td><code>&lt;em&gt;&lt;/em&gt;</code></td>
<td>Same as <code>i</code> but emphasize</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&lt;a href= &quot;URL/image&quot; target=&quot;_blank&quot; title=&quot;Tips&quot;&gt; text &lt;/a&gt;</code></td>
<td>Hyperlink</td>
</tr>
<tr>
<td><code>&lt;a&gt;&lt;/a&gt;</code></td>
<td>Mark text in the <code>&lt;a&gt;</code> tag</td>
</tr>
<tr>
<td><code>href=&quot; &quot;</code></td>
<td>the source of URL or image</td>
</tr>
<tr>
<td><code>target=&quot;_blank&quot;</code></td>
<td>open Link in a new tab</td>
</tr>
<tr>
<td><code>target=&quot;_self&quot;</code></td>
<td>open Link in a current tab</td>
</tr>
<tr>
<td><code>title=&quot; &quot;</code></td>
<td>Tips when mouse pints the hyperlink</td>
</tr>
<tr>
<td><code>href=&quot;./3.jpg OR ../2.jpg OR /root.jpg OR /dir/One/1.jpg&quot;</code></td>
<td><code>3.jpg</code> in current directory (<code>index.html</code>) / <code>2.jpg</code> in parent directory / <code>root.jpg</code> in root directory / completed path of <code>1.jpg</code> (<strong>See below attachment 1</strong>)</td>
</tr>
<tr>
<td><code>&lt;img src = &quot; &quot; width=&quot; 500px&quot; hight=&quot;250px&quot; alt=&quot;404&quot;&gt;</code></td>
<td>Referencing images and set width and hight, <code>alt</code>  error message when image is not available</td>
</tr>
</tbody></table>
<p><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></p>
<p><strong>Attachment 1</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Example of files tree</span><br><span class="line">root</span><br><span class="line">├─root.jpg</span><br><span class="line">├─Dir</span><br><span class="line">|  ├─One</span><br><span class="line">|  |  ├─1.jpg</span><br><span class="line">|  |  ├─Two</span><br><span class="line">|  |  |  ├─2.jpg</span><br><span class="line">|  |  |  ├─Three</span><br><span class="line">|  |  |  |   ├─3.jpg</span><br><span class="line">|  |  |  |   └index.html</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
